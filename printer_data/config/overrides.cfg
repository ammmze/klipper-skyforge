############################################# \
######## USER CONFIG OVERRIDES FILE #########  + --> This will help you personalize my config to your printer :)
############################################# /

# This file is yours! Feel free to edit it in order to include all the needed
# things to adapt my generic config to your machine. This file will not be erased
# when updating the config using moonraker and it will be kept as you've set it.
# You can change every section of the config. You can also add some new custom macros, etc...
# The corresponding documentation can be found in: docs > overrides.md

### Also, keep in mind: if you use a multi-MCU config such as the old school double SKRs or a CANbus toolhead
### board, you will need to specify which components are connected to which board in your own mcu.cfg file!
### Example: if something is connected to the toolhead MCU, you should use "config_pin: toolhead:PIN_NAME".

#> Main control MCUs are called "mcu" (and "secondary" when using a double MCU configuration)
#> Toolhead CANboard MCUs are called "toolhead"
#> MMU/ERCF MCUs are called "mmu" 

# ------------------------------------------------------------------------------------------

#-------------------------#
#   START_PRINT SEQUENCE  #
#-------------------------#

## The START_PRINT sequence is modular and fully customizable. A default START_PRINT sequence is auto-populated based on
## your probe choice (TAP, Dockable, Inductive), but if for some reasons you still want to modify it, please uncomment the following 3
## lines to define a new `variable_startprint_actions`. You can use any number of action or even duplicate some actions if needed.
## Available actions: "bed_soak", "extruder_preheating", "chamber_soak", "extruder_heating", "tilt_calib", "z_offset", "bedmesh", "purge", "clean", "primeline"
##
[gcode_macro _USER_VARIABLES]
# variable_startprint_actions: "bed_soak", "extruder_preheating", "chamber_soak", "tilt_calib", "extruder_heating", "purge", "clean", "z_offset", "bedmesh", "primeline"
variable_startprint_actions: "bed_soak", "extruder_preheating", "chamber_soak", "tilt_calib", "z_offset", "bedmesh", "custom1", "extruder_heating", "purge", "clean", "primeline"
gcode: # do not remove this line

[gcode_macro _PRINT_START_MODULE_CUSTOM1]
gcode:
    {% set temp = printer["gcode_macro START_PRINT"].extruder_temp %}
    

    # This should be run after bed mesh AND with a nozzle no hotter than 150c. It does touch the bed, so ... really should clean nozzle first...once we have something setup for that.
    # This may require that we first heat the nozzle to full extruder temp and then clean while it cools to ensure we don't ooze stuff out to interfere with the touch?
    # https://docs.cartographer3d.com/cartographer-probe/installation-and-setup/installation/print-start-macro
    _CLEAN_AND_COOL START_TEMP={temp} TARGET=150
    CARTOGRAPHER_TOUCH

[gcode_macro _CLEAN_AND_COOL]
gcode:
    {% set initial = params.START_TEMP|default(220)|float %}
    {% set target = params.TARGET|default(150)|float %}
    RESPOND MSG="It's clean and cool time. Heating extruder to {initial} then will wipe the nozzle as it cools to {target}."
    M104 S{initial} # Set hotend temp w/o waiting
    PARK Z_HOP=0
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={initial-1} MAXIMUM={initial+1}
    M104 S{target} # Set hotend temp w/o waiting
    M106 S255 # Turn on part fan 100% to speed up cooling
    # Iterate multiple times running nozzle cleaning if still hot
    # Workaround for not being allowed to have recursive gcode
    # commands.
    {% for i in range(10) %}
        _CLEAN_IF_HOT TARGET={target}
    {% endfor %}
    TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={target} # Wait for target temp in case we hadn't hit already
    M106 S0 # Turn off the fan

[gcode_macro _CLEAN_IF_HOT]
gcode:
    {% set target = params.TARGET|default(150)|float %}
    {% set actual_temp = printer.extruder.temperature|float %}
    {% if actual_temp > target %}
        # CLEAN_NOZZLE
        BLOBIFIER_CLEAN
    {% endif %}



[stepper_x]
microsteps: 16

[stepper_y]
microsteps: 16

[stepper_z]
microsteps: 16

[stepper_z1]
microsteps: 16

[stepper_z2]
microsteps: 16

[stepper_z3]
microsteps: 16

[extruder]
microsteps: 16

#-------------------------#
#   Z MOTORS DIRECTION    #
#-------------------------#

## Here is an example of some overrides for the motor directions as it's a pretty common one. If you need
## to invert the Z1 or Z3 motor direction on your machine, just uncomment the following lines.
[stepper_x]
homing_speed: 150
[stepper_y]
homing_speed: 150
[stepper_z]
homing_speed: 50

[stepper_z1]
dir_pin: !Z1_DIR

[stepper_z3]
dir_pin: !Z3_DIR


#-------------------------#
#   Probe Offsets         #
#-------------------------#

## Here is an example of some overrides for bed probes. These frequently have calibrated offsets for xyz,
## and many will need them during setup. If you need to set these, just uncomment the following lines.
# [probe]
# x_offset: -1.85
# y_offset: 29.3
# z_offset: 12.6

[stepper_y]
position_max: 356
position_endstop: 356

[quad_gantry_level]
gantry_corners:
   -60,-10
   410,420
#  Probe points
points:
   50,25   # Point 1
   50,275  # Point 2
   300,275 # Point 3
   300,25  # Point 4

speed: 100
horizontal_move_z: 10
retries: 5
retry_tolerance: 0.0075
max_adjust: 10

# [filament_switch_sensor pre_extruder]
# switch_pin: ^toolhead:gpio22

# [filament_switch_sensor post_extruder]
# switch_pin: ^toolhead:gpio6

[shaketune]
#[m226]

[auto_speed]
# Results 2025-03-14
# Recommended accel: 28437
# Recommended velocity: 544
#axis: diag_x, diag_y  ; One or multiple of `x`, `y`, `diag_x`, `diag_y`, `z`

#margin: 20            ; How far away from your axes to perform movements

#settling_home: 1      ; Perform settling home before starting Auto Speed
#max_missed: 1.0       ; Maximum full steps that can be missed
#endstop_samples: 3    ; How many endstop samples to take for endstop variance

#accel_min: 1000.0     ; Minimum acceleration test may try
#accel_max: 50000.0    ; Maximum acceleration test may try
#accel_accu: 0.05      ; Keep binary searching until the result is within this percentage

#velocity_min: 50.0    ; Minimum velocity test may try
#velocity_max: 5000.0  ; Maximum velocity test may try
#velocity_accu: 0.05   ; Keep binary searching until the result is within this percentage

#derate: 0.8           ; Derate discovered results by this amount

#validate_margin: Unset      ; Margin for VALIDATE, Defaults to margin
#validate_inner_margin: 20.0 ; Margin for VALIDATE inner pattern
#validate_iterations: 50     ; Perform VALIDATE pattern this many times

results_dir: ~/printer_data/config/auto_speed_results ; Destination directory for graphs

# Stress test homing ... try to trigger TTC
[gcode_macro _STRESS_TEST_HOMING]
variable_active: False
variable_counter: 0
gcode:
    {% set STOP = (params.STOP|default(0)|int) == 1 %}
    {% if STOP %}
        RESPOND TYPE=command MSG="action:prompt_end"
        SET_GCODE_VARIABLE MACRO=_STRESS_TEST_HOMING VARIABLE=active VALUE='False'
    {% else %}
        SET_GCODE_VARIABLE MACRO=_STRESS_TEST_HOMING VARIABLE=active VALUE='True'
        SET_GCODE_VARIABLE MACRO=_STRESS_TEST_HOMING VARIABLE=counter VALUE='0'
        UPDATE_DELAYED_GCODE ID=_STRESS_TEST_HOMING DURATION=0.3
    {% endif %}
   

[delayed_gcode _STRESS_TEST_HOMING]
gcode:
    {% set active = printer["gcode_macro _STRESS_TEST_HOMING"].active %}
    {% set counter = printer["gcode_macro _STRESS_TEST_HOMING"].counter %}
    {% if active %}
        {% set filter_name = 'canbus_stats' %}
        {% set filter_value = '' %}
        {% set show_cfg = 0 %}
        
        {% set out = [] %}

        {% for key1 in printer %}
            {% for key2 in printer[key1] %}
                {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                    {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
                {% endif %}
            {% else %}
                {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                    {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
                {% endif %}
            {% endfor %}
        {% endfor %}
        
        {action_respond_info(out|join("\n"))}
        RESPOND TYPE=command MSG="action:prompt_begin Stress Testing Homing"
        RESPOND TYPE=command MSG="action:prompt_text Running homing stress test. Current iteration {counter}"
        {% for line in out %}
            RESPOND TYPE=command MSG="action:prompt_text {line}"
        {% endfor %}
        RESPOND TYPE=command MSG="action:prompt_footer_button Stop|_STRESS_TEST_HOMING STOP=1"
        RESPOND TYPE=command MSG="action:prompt_show"
        SET_GCODE_VARIABLE MACRO=_STRESS_TEST_HOMING VARIABLE=counter VALUE='{counter+1}'
        G28
        UPDATE_DELAYED_GCODE ID=_STRESS_TEST_HOMING DURATION=0.3
    {% endif %}
